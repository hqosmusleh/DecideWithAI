1. Project Structure (all files and folders)
/DecideWithAI (root folder)
‚îÇ
‚îú‚îÄ main.py                 ‚Üê Flask app code
‚îú‚îÄ requirements.txt        ‚Üê Python packages
‚îú‚îÄ Procfile                ‚Üê optional (for deployment on Render)
‚îÇ
‚îî‚îÄ /templates
    ‚îî‚îÄ index.html          ‚Üê HTML template for the form and AI response

2. main.py
import os
from flask import Flask, render_template, request
from openai import OpenAI

app = Flask(__name__)
app.config["SECRET_KEY"] = os.environ.get("SECRET_KEY", "mydefaultsecret")

# OpenAI client
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

@app.route("/", methods=["GET", "POST"])
def home():
    ai_response = ""
    if request.method == "POST":
        decision = request.form.get("decision", "")
        mood = request.form.get("mood", "")
        prompt = f"Help me make a decision. Decision: {decision}. Mood: {mood}. Give me ranked suggestions with short reasoning."

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a friendly AI assistant."},
                {"role": "user", "content": prompt}
            ]
        )
        ai_response = response.choices[0].message.content

    return render_template("index.html", ai_response=ai_response)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

3. requirements.txt (5 packages to satisfy Render & Replit)
Flask==2.3.3
openai==1.31.0
gunicorn==21.2.0
Jinja2==3.1.2
Werkzeug==2.3.8

4. Procfile (optional; only needed for Render deployment)
web: gunicorn main:app

5. templates/index.html
<!DOCTYPE html>
<html>
<head>
    <title>Decide With AI</title>
</head>
<body>
    <h1>Decision Helper</h1>
    <form method="POST">
        <label>Decision:</label>
        <input type="text" name="decision" required><br>
        <label>Mood:</label>
        <input type="text" name="mood"><br>
        <button type="submit">Ask AI</button>
    </form>

    {% if ai_response %}
        <h2>AI Suggestions:</h2>
        <p>{{ ai_response }}</p>
    {% endif %}
</body>
</html>

6. Replit Secrets / Environment Variables

Add these via the üîë Secrets button in Replit:

Key	Value
OPENAI_API_KEY	your OpenAI API key
SECRET_KEY	any random secret string

Access them in code like:

os.environ.get("OPENAI_API_KEY")
os.environ.get("SECRET_KEY")

7. Running the App on Replit

Make sure main.py is selected as the entry file.

Click Run.

Replit will start your Flask app and give a live URL:

https://<your-replit-username>.<project-name>.repl.co


Test the form in the browser‚Äîyour AI responses should appear below the form after submission.

‚úÖ With this setup, you have everything needed:

All necessary files in the right folders.

requirements.txt with all packages.

Environment variables for secrets.

Working Flask code and HTML template.

Optional Procfile for future deployment to Render.